# CAUTION: this could possibly mess with certain build scripts!
export GREP_OPTIONS='--color=always'

# cute terminal prompt
export PS1="\u@\w ðŸ¦‘ "

# licensing
function setAuthor {
  eval author="$1"
  export AUTHOR=$author
}

function setLicense {
  eval license="$1"
  export MY_LICENSE=$license
}

# my aliases
alias src="source ~/.profile"
alias ports='netstat -tulanp'
alias grep='grep --color'
alias ll='ls -l'
alias la='ls -a'
alias ..="cd .."

# macOS-specific
alias alert="afplay /System/Library/Sounds/Purr.aiff"

# performance related aliases
## get top process eating memory
alias psmem='ps auxf | sort -nr -k 4'
alias psmem10='ps auxf | sort -nr -k 4 | head -10'
 
## get top process eating cpu ##
alias pscpu='ps auxf | sort -nr -k 3'
alias pscpu10='ps auxf | sort -nr -k 3 | head -10'

# git shorthand
alias pushto="git push origin"
alias pullfrom="git pull upstream"
alias dontPushUpstream="git remote set-url --push upstream do.not.push.upstream.invalid"
alias fetchup="git fetch upstream"
alias cloneall="git clone --recursive"
alias dummyCommit="git commit --allow-empty"
# Merge changes only (not commits) from another branch
function mergeBranchNoCommitsNoFF {
    git merge $1 --no-commit --no-ff
}

# generally useful functions
function findFileByName {
  echo "Searching for files matching \"$1\" (remember to enclose in single quotes if using regex)..."
  find . -name $1
}

function findDirByName {
  echo "Searching for directories matching \"$1\" (remember to enclose in single quotes if using regex)..."
  find . -name $1 -type d
}

function editFileByName {
  # N.B. silly zsh users, uncomment next line:
  #emulate -L ksh
  
  echo "Searching for files matching \"$1\"..."
  matches=($(find . -name $1))

  if [ ${#matches[@]} -eq 0 ]; then
      echo "Found no matches for that filename"
  elif [ ${#matches[@]} -eq 1 ]; then
      vim -- ${matches[0]}
  else
      for index in ${!matches[@]}; do
          echo $((index)): "${matches[$index]}"
      done

      read -p "Enter the number matching the file you wish to edit (in vim): " desiredIndex
      vim -- ${matches[${desiredIndex}]}
  fi
}

function lessFileByName {
  echo "Searching for files matching \"$1\"..."
  matches=($(find . -name $1))

  if [ ${#matches[@]} -eq 0 ]; then
      echo "Found no matches for that filename"
  elif [ ${#matches[@]} -eq 1 ]; then
      less -- ${matches[0]}
  else
      for index in ${!matches[@]}; do
          echo $((index)): "${matches[$index]}"
      done

      read -p "Enter the number matching the file you wish to view (with less): " desiredIndex
      less -- ${matches[${desiredIndex}]}
  fi
}

# search git branch for file
function searchBranchForFile {
  git ls-tree -r --name-only $1 | grep $2
}

function showFileFromBranch {
  matches=($(searchBranchForFile $2 $1))
  if [ ${#matches[@]} -eq 0 ]; then
        echo "Found no matches for that filename"
    elif [ ${#matches[@]} -eq 1 ]; then
        git show $2:${matches[0]}
    else
        for index in ${!matches[@]}; do
            echo $((index)): "${matches[$index]}"
        done
 
        read -p "Enter the number matching the file you wish to view: " desiredIndex
        git show $2:${matches[${desiredIndex}]}
    fi
}

function searchAllFilesForString {
  grep -R $1 .
}

function listAllFilesWithString {
  grep -R -l $1 .
}

function searchFileTypeForString {
  grep -R --include=$1 $2 .
}

function listAllFilesOfTypeWithString {
  grep -R -l --include=$1 $2 .
}

function occurrences {
  grep -o $1 $2 | wc -l
}

# verify the checksum using a specified SHA algorithm
function verifyShasum {
  if [ $# == "3" ]; then
      local shaResult="$(shasum -a $2 $1)"
      echo $shaResult
      local parts=($shaResult)
      if [ "${parts[0]}" == "$3" ];
      then
          echo "Checksum matched!"
      else
          echo "FAILED. Checksum did NOT match!"
      fi
  else
      echo "Usage: verifyShasum <file> <sha algorithm> <expected sum>"
      echo "Example: verifyShasum download.dmg 256 expectedSumValue"
  fi
}

checkLicensing() {
  printf "author: %s " "${AUTHOR:?Please set the AUTHOR environment variable. Consider using `setAuthor` to set the variable for your current shell (remember you will need to escape strings with spaces e.g. \"\"Name Surname\"\") or exporting the variable in your shell profile for persistence.}"
  printf "license: %s\n" "${MY_LICENSE:?Please set the MY_LICENSE environment variable. Consider using `setLicense` to set the variable for your current shell (remember you will need to escape strings with spaces e.g. \"\"My License String\"\") or exporting the variable in your shell profile for persistence.}"
}

function create-py {
  echo "Creating Python file with..."
  checkLicensing
  printf "\"\"\"\nFile: "$1".py\nAuthor: ${AUTHOR}\nDescription: TODO\n\n${MY_LICENSE}\n\"\"\"\n" > "$1".py
}

function create-cpp-class {
  echo "Creating C++ class (header and cpp files) with..."
  checkLicensing
  header="$1".h
  impl="$1".cpp
  printf "/**\n * File: $header\n * Author: ${AUTHOR}\n * Description: TODO\n * \n * ${MY_LICENSE}\n*/" > $header
  printf "/**\n * File: $impl\n * Author: ${AUTHOR}\n * Description: Implementation of $header\n * \n * ${MY_LICENSE}\n*/" > $impl
}

