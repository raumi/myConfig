# CAUTION: this could possibly mess with certain build scripts!
export GREP_OPTIONS='--color=always'

# cute terminal prompt
export PS1="\u@\w ðŸ¦‘ "

# my aliases
alias src="source ~/.profile"
alias ports='netstat -tulanp'
alias grep='grep --color'
alias ll='ls -l'
alias la='ls -a'

# macOS-specific
alias alert="afplay /System/Library/Sounds/Purr.aiff"

# performance related aliases
## get top process eating memory
alias psmem='ps auxf | sort -nr -k 4'
alias psmem10='ps auxf | sort -nr -k 4 | head -10'
 
## get top process eating cpu ##
alias pscpu='ps auxf | sort -nr -k 3'
alias pscpu10='ps auxf | sort -nr -k 3 | head -10'

# git shorthand
alias pushto="git push origin"
alias pullfrom="git pull upstream"
alias dontPushUpstream="git remote set-url --push upstream do.not.push.upstream.invalid"
alias fetchup="git fetch upstream"
alias cloneall="git clone --recursive"
alias dummyCommit="git commit --allow-empty"
alias ..="cd .."

# generally useful functions
function findFileByName {
  echo "Searching for files matching \"$1\" (remember to enclose in single quotes if using regex)..."
  find . -name $1
}

function editFileByName {
  echo "Searching for files matching \"$1\"..."
  matches=($(find . -name $1))

  if [ ${#matches[@]} -eq 0 ]; then
      echo "Found no matches for that filename"
  elif [ ${#matches[@]} -eq 1 ]; then
      vim -- ${matches[0]}
  else
      for index in ${!matches[@]}; do
          echo $((index)): "${matches[$index]}"
      done

      read -p "Enter the number matching the file you wish to edit (in vim): " desiredIndex
      vim -- ${matches[${desiredIndex}]}
  fi
}

# search git branch for file
function searchBranchForFile {
  git ls-tree -r --name-only $1 | grep $2
}

function showFileFromBranch {
  matches=($(searchBranchForFile $2 $1))
  if [ ${#matches[@]} -eq 0 ]; then
        echo "Found no matches for that filename"
    elif [ ${#matches[@]} -eq 1 ]; then
        git show $2:${matches[0]}
    else
        for index in ${!matches[@]}; do
            echo $((index)): "${matches[$index]}"
        done
 
        read -p "Enter the number matching the file you wish to view: " desiredIndex
        git show $2:${matches[${desiredIndex}]}
    fi
}

function searchAllFilesForString {
  grep -R $1 .
}

function searchFileTypeForString {
  grep -R --include=$1 $2 .
}

function occurrences {
  grep -o $1 $2 | wc -l
}

# verify the checksum using a specified SHA algorithm
function verifyShasum {
  if [ $# == "3" ]; then
      local shaResult="$(shasum -a $2 $1)"
      echo $shaResult
      local parts=($shaResult)
      if [ "${parts[0]}" == "$3" ];
      then
          echo "Checksum matched!"
      else
          echo "FAILED. Checksum did NOT match!"
      fi
  else
      echo "Usage: verifyShasum <file> <sha algorithm> <expected sum>"
  fi
}
